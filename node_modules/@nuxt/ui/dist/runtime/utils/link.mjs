export const nuxtLinkProps = {
  to: {
    type: [String, Object],
    default: void 0
  },
  href: {
    type: [String, Object],
    default: void 0
  },
  // Attributes
  target: {
    type: String,
    default: void 0
  },
  rel: {
    type: String,
    default: void 0
  },
  noRel: {
    type: Boolean,
    default: void 0
  },
  // Prefetching
  prefetch: {
    type: Boolean,
    default: void 0
  },
  noPrefetch: {
    type: Boolean,
    default: void 0
  },
  // Styling
  activeClass: {
    type: String,
    default: void 0
  },
  exactActiveClass: {
    type: String,
    default: void 0
  },
  prefetchedClass: {
    type: String,
    default: void 0
  },
  // Vue Router's `<RouterLink>` additional props
  replace: {
    type: Boolean,
    default: void 0
  },
  ariaCurrentValue: {
    type: String,
    default: void 0
  },
  // Edge cases handling
  external: {
    type: Boolean,
    default: void 0
  }
};
const uLinkProps = {
  as: {
    type: String,
    default: "button"
  },
  type: {
    type: String,
    default: "button"
  },
  disabled: {
    type: Boolean,
    default: null
  },
  active: {
    type: Boolean,
    default: void 0
  },
  exact: {
    type: Boolean,
    default: false
  },
  exactQuery: {
    type: Boolean,
    default: false
  },
  exactHash: {
    type: Boolean,
    default: false
  },
  inactiveClass: {
    type: String,
    default: void 0
  }
};
export const getNuxtLinkProps = (props) => {
  const keys = Object.keys(nuxtLinkProps);
  return keys.reduce((acc, key) => {
    if (props[key] !== void 0) {
      acc[key] = props[key];
    }
    return acc;
  }, {});
};
export const getULinkProps = (props) => {
  const keys = [...Object.keys(nuxtLinkProps), ...Object.keys(uLinkProps)];
  return keys.reduce((acc, key) => {
    if (props[key] !== void 0) {
      acc[key] = props[key];
    }
    return acc;
  }, {});
};
